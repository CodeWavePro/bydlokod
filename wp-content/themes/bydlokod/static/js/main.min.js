(function (factory) {
	typeof define === 'function' && define.amd ? define('main', factory) :
	factory();
}((function () { 'use strict';

	/**
	 * Render SVG code from images (<img /> tags).
	 *
	 * @param {DOMElement}	wrapper		DOM element, inside which need to render svgs.
	 * @param {String}		imgSelector	Specific selector for <img /> tag to render SVG.
	 */
	const renderSVGs = (wrapper, imgSelector = '') => {
	  if (!wrapper) return; // Get images with specific selector only OR all images.

	  const selector = imgSelector ? `img${imgSelector}` : 'img',
	        images = wrapper.querySelectorAll(selector),
	        svgs = []; // If there are no images - exit.

	  if (!images.length) return; // Get only svg images to svgs array.

	  images.forEach(img => {
	    let src = img.src,
	        extension = src.slice(-4);
	    if (extension === '.svg') svgs.push(img);
	  }); // If there are no svgs - exit.

	  if (!svgs.length) return;
	  const parser = new DOMParser();
	  svgs.forEach(svg => {
	    // Fetch the file from the server.
	    fetch(svg.src).then(response => response.text()).then(text => {
	      // Turn the raw text into a document with the svg element in it.
	      const parsed = parser.parseFromString(text, 'text/html'); // Select the <svg> element from that document.

	      const svgTag = parsed.querySelector('svg'); // If the svg is found, replace the image with the svg.

	      if (svgTag) svg.replaceWith(svgTag);
	    });
	  });
	};

	document.addEventListener('DOMContentLoaded', () => {

	  renderSVGs(document);
	});

	if (typeof window !== 'undefined') {
	  var passiveTestOptions = {
	    get passive() {
	      return undefined;
	    }

	  };
	  window.addEventListener('testPassive', null, passiveTestOptions);
	  window.removeEventListener('testPassive', null, passiveTestOptions);
	}

	var isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);

	document.addEventListener('DOMContentLoaded', () => {
	  /**
	   * @example of bodyScrollLock usage:
	   *
	  	let targetElement = document.querySelector( '#some-id' )	// Use ID of the element that will have normal scrolling behaviour.
	  	disableBodyScroll( targetElement, { reserveScrollBarGap: true } )	// Disable main scroll.
	  	enableBodyScroll( targetElement )	// Enable main scroll.
	  */
	});

})));

//# sourceMappingURL=main.min.js.map
